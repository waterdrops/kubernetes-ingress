name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

defaults:
  run:
    shell: bash

env:
  DOCKER_BUILDKIT: 1
  HELM_CHART_DIR: deployments/helm-chart
  GIT_NAME: NGINX Kubernetes Team
  GIT_MAIL: kubernetes@nginx.com

jobs:

  binary:
    name: Build Binary
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.commit.outputs.version }}
      helmChartVersion: ${{ steps.commit.outputs.helmChartVersion }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Output Variables
        id: commit
        run: |
          echo "::set-output name=version::${GITHUB_REF#refs/tags/v}"
          echo "::set-output name=helmChartVersion::$(helm show chart ${{ env.HELM_CHART_DIR }} | grep 'version:' | cut -d ' ' -f 2)"
      - name: Determine Go version from go.mod
        run: echo "GO_VERSION=$(grep "go 1." go.mod | cut -d " " -f 2)" >> $GITHUB_ENV
      - name: Setup Golang Environment
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Determine GOPATH
        run: echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
      - name: Build binaries
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist --skip-publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOPATH: ${{ env.GOPATH }}
      - name: Store Artifacts in Cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}

  release-docker:
    name: Release Images
    runs-on: ubuntu-20.04
    needs: [binary]
    strategy:
      matrix:
        include:
          - tag: ${{ needs.binary.outputs.version }}
            type: debian
            platforms: linux/arm,linux/arm64,linux/amd64,linux/ppc64le,linux/s390x
          - tag: ${{ needs.binary.outputs.version }}-alpine
            type: alpine
            platforms: linux/arm,linux/arm64,linux/amd64,linux/ppc64le,linux/s390x
          - tag: ${{ needs.binary.outputs.version }}-ubi
            type: ubi
            platforms: linux/arm64,linux/amd64
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Output Variables
        id: commit
        run: |
          echo "::set-output name=date::$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          echo "::set-output name=nginx_version::$(cat build/Dockerfile | grep -m1 "FROM nginx:" | cut -d":" -f2 | cut -d" " -f1)"
      - name: Fetch Cached Artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm,arm64,ppc64le,s390x
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      - name: Cache Docker layers for ${{ matrix.image }}
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-${{ matrix.image }}-cache
          key: ${{ runner.os }}-buildx-${{ matrix.image }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.image }}-
      - name: DockerHub Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Dockerhub
        uses: docker/build-push-action@v2
        with:
          file: build/Dockerfile
          context: '.'
          cache-to: type=local,dest=/tmp/.buildx-${{ matrix.image }}-cache
          target: goreleaser
          tags: nginx/nginx-ingress:${{ matrix.tag }}
          platforms: ${{ matrix.platforms }}
          push: true
          build-args: |
            BUILD_OS=${{ matrix.type }}
            IC_VERSION=${GITHUB_REF#refs/tags/}
            NGINX_VERSION=${{ steps.commit.outputs.nginx_version }}
            DATE=${{ steps.commit.outputs.date }}
            GIT_COMMIT=${{ github.sha }}

  package-helm:
    name: Package Helm Chart
    runs-on: ubuntu-20.04
    needs: [binary, release-docker]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Lint
        run: helm lint ${{ env.HELM_CHART_DIR }}
      - name: Package
        run: helm package --version ${{ needs.binary.outputs.helmChartVersion }} ${{ env.HELM_CHART_DIR }}
      - name: Upload Chart
        uses: actions/upload-artifact@v2
        with:
          name: helm-chart
          path: ${{ github.workspace }}/nginx-ingress-${{ needs.binary.outputs.helmChartVersion }}.tgz

  release-helm:
    name: Release Helm Chart
    runs-on: ubuntu-20.04
    needs: [binary, release-docker, package-helm]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          repository: nginxinc/helm-charts
          fetch-depth: 1
          token: ${{ secrets.NGINX_PAT }}
      - name: Remove previous Chart
        run: rm -f ${{ github.workspace }}/stable/nginx-ingress-${{ needs.binary.outputs.helmChartVersion }}.tgz
      - name: Retrieve latest Helm Chart
        uses: actions/download-artifact@v2
        with:
          name: helm-chart
          path: ${{ github.workspace }}/stable
      - name: Push Helm Chart
        run: |
          helm repo index stable --url https://helm.nginx.com/stable
          git add -A
          git -c user.name='${{ env.GIT_NAME }}' -c user.email='${{ env.GIT_MAIL }}' \
          commit -m "NGINX Ingress Controller - Release ${{ needs.binary.outputs.version }}"
          git push -u origin master

  publish-release-notes:
    name: Publish Release Notes
    runs-on: ubuntu-20.04
    needs: [release-helm]
    steps:
      - name: Publish Release Notes
        uses: release-drafter/release-drafter@v5
        with:
            publish: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify
    runs-on: ubuntu-20.04
    needs: publish-release-notes
    if: always()
    steps:
      - name: Workflow Status
        id: check
        uses: martialonline/workflow-status@v2
      - name: Output Variables
        id: commit
        run: |
          echo "::set-output name=sha::$(echo ${GITHUB_SHA} | cut -c1-7)"
          echo "::set-output name=repo::$(echo ${GITHUB_REPOSITORY} | cut -d '/' -f 2)"
      - name: Send Notification
        uses: 8398a7/action-slack@v3
        if:
          steps.check.outputs.status == 'failure' ||
          steps.check.outputs.status == 'cancelled'
        with:
          status: custom
          custom_payload: |
            {
              username: 'Github',
              icon_emoji: ':octocat:',
              mention: 'channel',
              attachments: [{
                title: '[${{ needs.binary.outputs.repo }}] ${{ github.workflow }} pipeline has failed',
                color: '${{ steps.check.outputs.status }}' == 'failure' ? 'danger' : 'warning',
                fields: [{
                  title: 'Commit Hash',
                  value: '${{ needs.binary.outputs.sha }}',
                  short: true
                },
                {
                  title: 'Author',
                  value: '${{ github.actor }}',
                  short: true
                },
                {
                  title: 'Pipeline URL',
                  value: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
                  short: false
                }]
              }]
            }
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
